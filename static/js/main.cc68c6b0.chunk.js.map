{"version":3,"sources":["store/actions.ts","store/index.ts","api/api.tsx","store/selectors.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SET_USER","SET_TODOS","setUserAction","payload","type","initialState","todos","userId","store","createStore","state","action","composeWithDevTools","requestTodos","a","fetch","response","json","requestUser","getUserSelector","getTodosSelector","TodoList","useState","query","setQuery","selectQuery","setSelectQuery","dispatch","useDispatch","selectedUserId","useSelector","filteredTodos","filter","todo","title","includes","completed","useEffect","then","className","value","onChange","event","target","placeholder","map","checked","readOnly","onClick","id","CurrentUser","selectedUser","setSelectedUser","userSelector","promise","name","email","phone","App","find","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc68c6b0.chunk.js","sourcesContent":["export const SET_USER = 'SET_USER';\nexport const SET_TODOS = 'SET_TODOS';\n\nexport const setUserAction = (payload: number): Action => ({\n  type: 'SET_USER',\n  payload,\n});\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: 'SET_TODOS',\n  payload,\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { SET_USER, SET_TODOS } from './actions';\n\n// Action types - is just a constant. MUST have a unique value.\n// Action creators - a function returning an action object\n// Selectors - a function receiving Redux state and returning some data from it\n// Initial state\nconst initialState: State = {\n  todos: [],\n  userId: 0,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_USER:\n      return { ...state, userId: action.payload };\n\n    case SET_TODOS:\n      return { ...state, todos: action.payload };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","/* eslint-disable no-console */\nconst TODOS_URL = 'https://mate.academy/students-api/todos';\nconst USERS_URL = 'https://mate.academy/students-api/users';\n\nexport const requestTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(TODOS_URL);\n\n  return response.json();\n};\n\nexport const requestUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${USERS_URL}/${userId}`);\n\n  return response.json();\n};\n","export const getUserSelector = (state: State) => state.userId;\nexport const getTodosSelector = (state: State) => state.todos;\n","/* eslint-disable max-len */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestTodos } from '../../api/api';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\n// eslint-disable-next-line max-len\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectQuery, setSelectQuery] = useState('');\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(getUserSelector);\n  const todos = useSelector(getTodosSelector);\n  const filteredTodos = todos.filter(todo => todo.title.includes(query)).filter(todo => {\n    switch (selectQuery) {\n      case 'active':\n        return todo.completed === false;\n\n      case 'completed':\n        return todo.completed === true;\n\n      default:\n        return todo;\n    }\n  });\n\n  useEffect(() => {\n    requestTodos().then(response => dispatch(setTodosAction(response)));\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <h2>Ps: users 2 and 8888 do not exist for some reason</h2>\n\n      <input\n        data-cy=\"filterByTitle\"\n        type=\"text\"\n        value={query}\n        onChange={\n          (event) => {\n            setQuery(event.target.value);\n          }\n        }\n        placeholder=\"Search by title\"\n      />\n\n      <select value={selectQuery} onChange={(event) => setSelectQuery(event.target.value)}>\n        <option value=\"all\">Show all</option>\n        <option value=\"active\">Show all uncompleted</option>\n        <option value=\"completed\">Show all completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n\n        <ul data-cy=\"listOfTodos\" className=\"TodoList__list\">\n          {filteredTodos?.map((todo: Todo) => (\n            <li\n              key={todo.id}\n              className={\n                todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'\n              }\n            >\n              <label>\n                <input checked={todo.completed} type=\"checkbox\" readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                data-cy=\"userButton\"\n                className={\n                  selectedUserId === todo.userId\n                    // eslint-disable-next-line max-len\n                    ? 'TodoList__user-button TodoList__user-button--selected button'\n                    : 'TodoList__user-button button'\n                }\n                type=\"button\"\n                onClick={() => {\n                  if (todo.userId !== selectedUserId) {\n                    return (dispatch(setUserAction(todo.userId)));\n                  }\n\n                  return null;\n                }}\n              >\n                User&nbsp;#{todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable max-len */\n/* eslint-disable react/jsx-one-expression-per-line */\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestUser } from '../../api/api';\nimport { setUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n  const userSelector = useSelector(getUserSelector);\n\n  useEffect(() => {\n    requestUser(userSelector).then(promise => setSelectedUser(promise));\n  }, [userSelector]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${selectedUser?.id}`}</span></h2>\n\n      <h3 data-cy=\"userName\" className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        type=\"button\"\n        className=\"TodoList__user-button button\"\n        onClick={\n          () => dispatch(setUserAction(0))\n        }\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getUserSelector, getTodosSelector } from './store/selectors';\n\nexport const App: React.FC = () => {\n  const selectedUserId = useSelector(getUserSelector);\n  const todos = useSelector(getTodosSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {todos.find(todo => todo.userId === selectedUserId) ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}